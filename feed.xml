<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://runqiuye.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://runqiuye.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-27T01:43:32+00:00</updated><id>https://runqiuye.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">Two weeks of summer — summary and reflection</title><link href="https://runqiuye.github.io/blog/2025/summary/" rel="alternate" type="text/html" title="Two weeks of summer — summary and reflection"/><published>2025-05-26T19:00:00+00:00</published><updated>2025-05-26T19:00:00+00:00</updated><id>https://runqiuye.github.io/blog/2025/summary</id><content type="html" xml:base="https://runqiuye.github.io/blog/2025/summary/"><![CDATA[<p>After finishing all my finals for the Spring 25 semester at CMU in the first week of May, I arrived at Seattle after a 5-hour flight on which I almost died because of the uncomfort. Now I have spent more than two weeks in Seattle, and I have started my internship at Amazon for two weeks. I am going to put some thoughts and reflections into this document as a brief summary.</p> <p>First of all, the internship at AWS. For a brief recap, I received an online assessment from Amazon near the end of Fall 25 semester, or 0~2 weeks from the finals week to be precise. I was not able to figure out the second coding question, but I guess CMU reputation bailed me out, so I got the interview right when I was protoring the finals for Calculus in 3D. After a not so easy process of scheduling the interview, as I will be in China during winter break, I clutch up on this 3rd interview I got for the year and landed this dream-like internship. As you may already guess this is my first ever internship, not to say one year ago I cannot even code anything. Therefore, I am naturally very nervous, and it is indeed quite tough.</p> <p>Before my first day I know nothing about my team, other than the fact that my interviewer has AWS Bedrock on her LinkedIn. Stepping into the office, I finally saw this sign that says “AWS Data/ML Only”. I was quite lucky honestly, as I am very interested in machine learning. Now two weeks into the internship, I have been getting more and more familiar with my team, and liking it more and more.</p> <p>Our team mostly helps users host LLMs on AWS, and my project is interacting with this whole lifecycle of model hosting to visualize datas and logs. The problem is I know nothing about AWS or cloud computing whatsoever, but thankfully my mentor pointed to me some AWS services I should start getting familiar with, and I found several good youtube videos introducing what is cloud computing and AWS. During these days, I start to become familiar with the common AWS services, and I become more and more interested in this topic. After thinking about it and asking my friend, I decide that it will be a good idea to get a AWS certification this summer during the internship. After some more youtube videos, I bought this class on udemy for AWS cloud-practitioner exam to start studying, and I should figure out how to schedule an exam and all the other stuff soon. I have watched a few sections of this class during the two weeks, and I think I like it a lot. The hands-on help me understand the concepts a lot. I think I should lock in to study more about it, and definitely aiming to get the certification during my internship. Other than that, I have been getting familiar with the architecture and pipeline I will be working with, but of course new challenges are always comming so I have to be ready.</p> <p>Because of the unexpected toughness of the internship, the self-study plan I made before the summer couln’t really work out — I thought I will be motivated enough or have the time to finish off the Standford cs224n (NLP) lectures and do all the homework and the project. I also plan to self-study more ML on the theory side by reading Bishop’s Pattern Recognition and Machine Learning. However I was not motivated enough or honestly not having enough time for those. I felt so tired after work every day and I know I should prioritize on the AWS course (even on that I am slacking a bit). So I guess those needs to wait a bit. I should be able to have plenty of time reading PRML when I take 10708 next year, which I am very looking forward to, but I need to come up with some time to do the NLP course and projects, which is more on the practical side with an actual project. I also need to figure out how and where to rent GPU for these, but again cannot really think about these now.</p> <p>Then comes Memorial Day weekend, and I am writing this on the last day of the holiday. I should have also spent more time exploring Seattle, but my friends keep bailing out of the plan so that is kinda annoying. I bought a basketball though so I can now go play basketball every day instead of it depending on someone’s already playing and I can join in UW. I was thinking about going to gym but Amazon’s frugality gives no gym and UW gym is not affordable. Hopefully basketball is good enough and I really need to get the consistency in. I played quite a lot of Pubg mobile for the holiday which is not good, but I guess people need to take break and it is honestly good to play with all my friends again. Last time we play like this is literally before coming to CMU and before meeting in person. Also, AWS course just feels a bit boring this weekend, so I start to read Folland’s real analysis textbook. I am of course interested in this but also I might need to read this to take grad probability and stochastic calculus if I end up doing that (which again I am interested in). It’s much better than the AWS course for sure, probably because I just think I like analysis, even after the very tough math studies analysis course last semester. In particular I am reading the chapter on signed and complex measures, it’s really fun but I haven’t done any exercise yet. I probably should and I need to figure out how should I approach it. Hopefully I can find some online course on this and see if they have a list of problems for the assignments, which is something I always do. At the same time it is also true that I need to get the AWS course back on track if I want to get the certification before my internship ends (which I definitely want).</p> <p>I think that’s pretty much it and I think I am doing a relatively good job. Internship are most certainly tough, but I will ask more questions and hopefully ramp up successfully. For self-study, I should be just prioritizing AWS course and do some real analysis if that’s too boring, might also need to switch with NLP though (too much to do uhh). Hopefully I can use the time after work better. For touching grass I just remembered that I will go Bellevue next week with my friends Daniel and Sunny, and I should also definitely checkout UW wetlands, hopefully with some friends. More ambitious hiking plans are not very tangible at this point even though it sounds good. I also hope I can consistenly work out every day, at least by playing some basketball.</p> <p>Hope for the best.</p>]]></content><author><name></name></author><category term="thoughts"/><category term="computer science"/><category term="mathematics"/><summary type="html"><![CDATA[Thoughts and reflection on my first two weeks of summer --- internship, self-study, etc.]]></summary></entry><entry><title type="html">Setting up this website</title><link href="https://runqiuye.github.io/blog/2025/setup/" rel="alternate" type="text/html" title="Setting up this website"/><published>2025-05-26T15:00:00+00:00</published><updated>2025-05-26T15:00:00+00:00</updated><id>https://runqiuye.github.io/blog/2025/setup</id><content type="html" xml:base="https://runqiuye.github.io/blog/2025/setup/"><![CDATA[<p>I decided that I should set up a personal website, but at the same time I have never done anything like HTML or CSS before, nor do I want to learn about that. I then watched some youtube videos and find out that <code class="language-plaintext highlighter-rouge">jekyll</code> and this <code class="language-plaintext highlighter-rouge">al-folio</code> template seems pretty cool, and it doesn’t seem too hard, so I begin setting it up.</p> <p>As the <code class="language-plaintext highlighter-rouge">INSTALL.md</code> file in the <code class="language-plaintext highlighter-rouge">al-folio</code> repository recommended, I was following the guide and try to set up through Docker containers. Then I realized that I know nothing about Docker, except for what are Docker images, Docker containers, and Docker registries. What this leads to is that after hitting Enter after typing in the <code class="language-plaintext highlighter-rouge">docker compose up</code>, I did not even realize the things is already running, because I was waiting for the command to finish running and it takes forever. After I finally realized this fact, I could not see anything in <code class="language-plaintext highlighter-rouge">http://localhost:8080</code>. This is when I realized there is actually an ERROR! Indeed, the log says</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll-1  | bundler: failed to load command: jekyll (/usr/local/bundle/bin/jekyll)
jekyll-1  | /usr/local/bundle/gems/bundler-2.6.6/lib/bundler/definition.rb:695:in 'Bundler::Definition#materialize': Could not find nokogiri-1.18.8-x86_64-linux-gnu in locally installed gems (Bundler::GemNotFound)
</code></pre></div></div> <p>even though the previous command <code class="language-plaintext highlighter-rouge">docker compose pull</code> tells me <code class="language-plaintext highlighter-rouge">jekyll</code> is already pulled. After I stuck here for about one hour, I was ready to call it a day, but I decided to give it another try.</p> <p>I decided to roll back to the local setup method, which is supposedly not recommended. I then decide to follow <a href="https://www.youtube.com/watch?v=fV01b0duZwU&amp;t=632s">this video</a> to download ruby, jekyll, bundler, or whatever those are. However, the command in the video is not working for me at all! Supposedly it should install this thing called <code class="language-plaintext highlighter-rouge">chruby</code> and <code class="language-plaintext highlighter-rouge">chruby</code> will download <code class="language-plaintext highlighter-rouge">ruby 3.3.5</code>. These steps goes well but then <code class="language-plaintext highlighter-rouge">ruby -v</code> still gives me version 2.6, and I have zero idea how to change it.</p> <p>I finally decide to search up how to download and use a specific ruby version, and most answers in stack overflow is referring to this <code class="language-plaintext highlighter-rouge">rbenv</code> thing, which I suppose is similar to <code class="language-plaintext highlighter-rouge">chruby</code>. Therefore, I installed it and successfully used the <code class="language-plaintext highlighter-rouge">rbenv global 3.3.5</code> command to conclude the success of this step. Then I installed some more stuff like jekell and bundler, which again I have no idea on. There might again be some version issues happening during the process but it was 1am and I could not recall it. Then this deployment command <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> finally runs successfully and I was able to see the template website at <code class="language-plaintext highlighter-rouge">http://localhost:4000</code>.</p> <p>Even so, one thing that annoys me VERY MUCH is that there is this <code class="language-plaintext highlighter-rouge">rbenv:3.3.5</code> that shows up on my terminal, to the right of every prompt. I am honestly so pissed off by this because I do not want any of thses showing up on my terminal every day. I searched on stack overflow how to get rid of it and did not get any good answer. I also did not see a <code class="language-plaintext highlighter-rouge">PROMPT</code> field in my <code class="language-plaintext highlighter-rouge">.zshrc</code> so I suppose it must be somewhere else. Very unfortunately I have yet to figure out a solution for this and I am stuck with this thing that torture my several hours on my terminal.</p> <p>After a whole night sleep I did some editing of the template to remove the pages I do not really want and filled in some actual content. Now I think the website is at a relatively complete state and I will call it here.</p> <p>Stay tuned for more random thoughts.</p>]]></content><author><name></name></author><category term="thoughts"/><category term="computer science"/><summary type="html"><![CDATA[Difficulties and solutions for setting up this website]]></summary></entry><entry><title type="html">Counting numbers</title><link href="https://runqiuye.github.io/blog/2025/numdp/" rel="alternate" type="text/html" title="Counting numbers"/><published>2025-01-29T00:00:00+00:00</published><updated>2025-01-29T00:00:00+00:00</updated><id>https://runqiuye.github.io/blog/2025/numdp</id><content type="html" xml:base="https://runqiuye.github.io/blog/2025/numdp/"><![CDATA[<p>This is a document I wrote a while ago, before I create this website. It is quite interesting, so I am making this my first blog post on this website to help me set up the blog section and keep the document.</p> <hr/> <p>I was doing some practices on the CSES problem set, and this number counting dynamic programming problem interests me a lot. This is an example of a type of problems where we need to count numbers that satisfies a given requirement, but the range of the numbers is too large for us to check one by one, such as \(10^{18}\). Therefore, we need to use dynamic programming to speed up the counting. This is also the first time I solve a problem like this, so I decide to document my thought process and solution.</p> <h2 id="problem">Problem</h2> <p>Count the number of integers between \(a\) and \(b\) where <strong>no two adjacent digits are the same</strong>.</p> <h4 id="input">Input</h4> <p>The only input line has two integers \(a\) and \(b\).</p> <h4 id="output">Output</h4> <p>Print one integer – the answer to the problem.</p> <h4 id="constraints">Constraints</h4> <p>The integers \(a\) and \(b\) are such that \(0 \leq a \leq b \leq 10^{18}\)</p> <h4 id="example">Example</h4> <p>Input</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>123 321
</code></pre></div></div> <p>Output</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>171
</code></pre></div></div> <h2 id="solution">Solution</h2> <p>If we can calculate the number of integers between \(0\) and \(n\) with no two adjacent digits for any nonnegative \(n\), then the answer is just the count for \([0, b]\) and minus the count for \([0, a - 1]\). We will write a function called <code class="language-plaintext highlighter-rouge">solve</code> that solves this reduced problem.</p> <p>Note that for a number to have no two adjacent digits being the same, the first and second digit on the left cannot be the same, and the “subnumber” starting from the second digits on the left and all the way to the right cannot have two ajacent digits being the same either. We have then found a natural subproblem for dynamic programming.</p> <p>First count the number of integers with \(i\) digits that start with some digit (for example starting with \(1\), or \(2\), it doesn’t matter), have no adjacent digits being the same, call this \(f_i\). Note that we do not consider any leading zeros here. This might be a bit confusing to parse. Consider this example — \(f_3\) is the number of 3-digits numbers that start with a \(1\) and have no adjacent digits being the same. Then we note that \(f_i = 9 f_{i-1}\), since we already set the first digit and the second digit has \(9\) options for it to be different than the first. Also \(f_1 = 1\), because for example there is only one 1-digit number that start with the digit \(2\), namely the number \(2\). We can preprocess \(f_i\) for \(1 \leq i \leq 18\).</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">19</span><span class="p">;</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">l</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">;</span>
    <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1LL</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9LL</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solve</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">-</span> <span class="n">solve</span><span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <p>For our main function <code class="language-plaintext highlighter-rouge">solve</code>, we first need to convert the number into an array of digits.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">len</span><span class="o">++</span><span class="p">;</span>
        <span class="n">a</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
        <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ......</span>
<span class="p">}</span>
</code></pre></div></div> <p>To illustrate this with an example, consider <code class="language-plaintext highlighter-rouge">solve(2413)</code>. Then the <code class="language-plaintext highlighter-rouge">a</code> array and the variable <code class="language-plaintext highlighter-rouge">len</code> would be</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [0, 3, 1, 4, 2]
len = 4
</code></pre></div></div> <p>Now we start the counting process, for a number with 4 digits and the leading digit being <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">1</code>, there is <code class="language-plaintext highlighter-rouge">f[4]</code> integers without two adjacent digits being the same. For leading digit <code class="language-plaintext highlighter-rouge">2</code> we have to consider the boundary so we handle that using next iteration. The next iteration is essentially counting the number of integers with 4 digits, starting with <code class="language-plaintext highlighter-rouge">2</code>, and no two adjacent digits are the same. For <code class="language-plaintext highlighter-rouge">0</code>, <code class="language-plaintext highlighter-rouge">1</code>, <code class="language-plaintext highlighter-rouge">2</code> and <code class="language-plaintext highlighter-rouge">3</code> on <code class="language-plaintext highlighter-rouge">a[3]</code> we can use our <code class="language-plaintext highlighter-rouge">f[3]</code> value directly and we handle the boundary <code class="language-plaintext highlighter-rouge">4</code> with next iteration. Therefore, our main loop is</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">res</span> <span class="o">+=</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="n">res</span> <span class="o">-=</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span> <span class="n">res</span><span class="o">++</span><span class="p">;</span>
</code></pre></div></div> <p>Notice that when <code class="language-plaintext highlighter-rouge">a[i] &gt; a[i + 1]</code>, we should not count the numbers with <code class="language-plaintext highlighter-rouge">a[i] = a[i + 1]</code> so we use <code class="language-plaintext highlighter-rouge">res -= f[i]</code> to handle that. In addition, when <code class="language-plaintext highlighter-rouge">a[i] = a[i + 1]</code> since we are essentially counting the numbers starting with <code class="language-plaintext highlighter-rouge">a[i+1 : len]</code> in later iterations and <code class="language-plaintext highlighter-rouge">a[i] = a[i + 1]</code> indicates the presence of two adjacent digits being the same, we break from the loop. Finally the <code class="language-plaintext highlighter-rouge">flag</code> and <code class="language-plaintext highlighter-rouge">res++</code> is used to handle the number itself.</p> <p>To deal with leading zeros, we remove the contribution from leading digits being zeros first by <code class="language-plaintext highlighter-rouge">res -= f[len]</code>, and then add the contribution from integers with <code class="language-plaintext highlighter-rouge">j</code> digits starting with <code class="language-plaintext highlighter-rouge">1</code> to <code class="language-plaintext highlighter-rouge">9</code> (ensuring no leading zeros) for <code class="language-plaintext highlighter-rouge">1 &lt;= j &lt;= len</code>.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">res</span> <span class="o">-=</span> <span class="n">f</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">res</span> <span class="o">+=</span> <span class="mi">9LL</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
<span class="p">}</span>
<span class="n">res</span><span class="o">++</span><span class="p">;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">res++</code> is used to handle the number <code class="language-plaintext highlighter-rouge">0</code>. This finishes this function and the complete solution code is as follows.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">19</span><span class="p">;</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">len</span><span class="o">++</span><span class="p">;</span>
        <span class="n">a</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
        <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="n">res</span> <span class="o">-=</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span> <span class="n">res</span><span class="o">++</span><span class="p">;</span>

    <span class="n">res</span> <span class="o">-=</span> <span class="n">f</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="mi">9LL</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="n">res</span><span class="o">++</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">l</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">;</span>
    <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1LL</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9LL</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solve</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">-</span> <span class="n">solve</span><span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="study"/><category term="computer science"/><category term="algorithms"/><summary type="html"><![CDATA[A number counting dynamic programming problem]]></summary></entry></feed>