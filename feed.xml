<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://runqiuye.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://runqiuye.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-12T18:47:03+00:00</updated><id>https://runqiuye.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">Super Egg Drop</title><link href="https://runqiuye.github.io/blog/2025/super-egg-drop/" rel="alternate" type="text/html" title="Super Egg Drop"/><published>2025-07-11T22:20:00+00:00</published><updated>2025-07-11T22:20:00+00:00</updated><id>https://runqiuye.github.io/blog/2025/super-egg-drop</id><content type="html" xml:base="https://runqiuye.github.io/blog/2025/super-egg-drop/"><![CDATA[<p>It has been a while since the last post. This is because things has been quite busy recently, and there is nothing much to write about. However, recently I came across this interesting algorithm problem on leetcode called <a href="https://leetcode.com/problems/super-egg-drop/description/">Super Egg Drop</a>. Therefore this post will be an editorial of the problem.</p> <h2 id="problem">Problem</h2> <p>You are given $K$ identical eggs and you have access to a building with $N$ floors labeled from $1$ to $N$. You know that there exists a floor $f$ where $0 \leq f \leq N$ such that any egg dropped at a floor higher than $f$ will break, and any egg dropped at or below floor f will not break.</p> <p>Each move, you may take an unbroken egg and drop it from any floor $x$ (where $1 \leq x \leq N$). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.</p> <p>Return the minimum number of moves that you need to determine with certainty what the value of $f$ is.</p> <h4 id="constraints">Constraints</h4> <ul> <li>$1 \leq K \leq 100$</li> <li>$1 \leq N \leq 10^4$</li> </ul> <h2 id="example">Example</h2> <p>To see why the egg breaks make things harder, consider if the eggs will not break, which is equivalent to when we have unlimited number of eggs. We can then use a binary search techique to shrink the possible range of $f$ by half every move. However, if we only have $1$ egg and this egg will break, we must use $n$ moves to determine what $f$ is, if $0 \leq f \leq n$. The strategy we will use is to throw the egg from $x = 1$ all the way to $x = n$. If the egg breaks when $x = i$, then we know $f = i - 1$. If the eggs doesn’t break at all, then $f = n$. The reason why we must use this strategy is because if we drop the egg somewhere in the middle, let’s say $x = i$. If the egg breaks then we only know $0 \leq f \leq i - 1$, and we have no eggs to determine where $f$ actually is. If we have more than one egg, we can reach something like a balance between the binary search strategy and the linear search strategy.</p> <p>Consider this example where $k = 2$ and $n = 6$. The minimum moves needed for us to determine with certainty what the value of $f$ is $3$. One optimal strategy is as follows:</p> <ul> <li>Drop the first egg on $x = 2$.</li> <li>If the egg breaks then we know $0 \leq f \leq 2$. Drop the second egg on $x = 1$ and $x = 2$ respectively.</li> <li>If the first egg doesn’t break, then drop the first egg agin on floor $5$. If it breaks then $3 \leq f \leq 4$ and drop the second egg on $x = 4$. Otherwise $5 \leq f \leq 6$ and drop the second egg on $x = 6$.</li> </ul> <h2 id="solution">Solution</h2> <p>It is not hard to realize that the minimum number of moves given $k$ eggs is only dependent how large the range of $f$ is. Then we can identify this as a subproblem for dynamic programming. Let $T(n, k)$ be the minimum number of moves needed with $k$ eggs and the size of the range of $f$ is $n$. Therefore in the given problem we want to know $T(n + 1, k)$, as $0 \leq f \leq n$ so there is $n + 1$ possible values of $f$.</p> <p>Also note here for a possible range of $f$, say $a \leq f \leq b$. It is guaranteed that when we drop the egg on $x = a$, the egg will not break. For example originally if we drop the egg on $x = 0$ the egg will not break, so the problem does not even allow us to drop it on $x = 0$. It is meaningless anyway. This property also holds for our subproblems. For example when we drop the egg on $x = i$. If it breaks then $0 \leq f \leq i - 1$, and we know egg will not break when dropeed on $x = 0$. If it does not break then we know $i \leq f \leq n$, and we already know it will not break on $x = i$.</p> <p>With these discussion, we have the following recurrence for our dynamic programming:</p> \[T(n, k) = 1 + \min_{1 \leq i \leq n - 1} \max \left\{ T(i, k - 1), T(n - i, k) \right\}.\] <p>Why is this the recurrence relationship? Suppose WLOG here $0 \leq f \leq n - 1$, and we drop the egg on $x = i$, where $1 \leq i \leq n - 1$. Then if it breaks we are left with $k - 1$ eggs and $0 \leq f \leq i - 1$, which explains the $T(i, k - 1)$. If it does not break then it is $T(n - i, k)$. For worst case, we need to take the max of the two, but for optimal strategy, we take the min among $1 \leq i \leq n - 1$.</p> <p>For boundary conditions, we clearly have $T(1, k) = 0$ for any $k \geq 1$. With the discussion above, we also know that $T(n, 1) = n - 1$, for dropping the eggs at $x = 1$ all the way to $x = n - 1$.</p> <p>Now for the brute force approach, we use the recurrence relation to calculate $T(n, k)$ for all $1 \leq n \leq N$ and $1 \leq k \leq K$. There are $NK$ nodes, but calculating each node takes $O(N)$ time as we need to take the min among $1 \leq i \leq n - 1$. This leads to a total $O(N^2 K)$ time. For the given constraints, this will cause Time Limit Exceeded for worst case.</p> <p>The question then becomes, how can we optimize this?</p> <h3 id="method-1">Method 1</h3> <p>It is important to note here our desired function $T(n, k)$ is clearly increasing against $n$. When there are a bigger search space but same number of eggs, we need more moves. This means that for fixed $n$ and $k$, for example when we are calculating $T(n, k)$, the function $T(i, k - 1)$ is increasing against $i$, and the function $T(n - i, k)$ is decreasing against $i$.</p> <div class="row mt-1"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/super-egg-drop-1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Illustration of monotonicity of Method 1. </div> <p>Now it is clear that the min is achieved when $T(i, k - 1) = T(n - i, k)$. We can then binary search for the first $i$ such that $T(i, k - 1) \geq T(n - i, k)$. The min is then between $\max { T(i, k - 1), T(n - i, k) }$ and $\max { T(i - 1, k - 1), T(n + 1 - i, k) }$. Of course make sure the index is within range.</p> <p>Using binary search, we have lower the cost for each node from $O(N)$ to $O(\log N)$. The total time is then $O(N K \log N)$. Total space needed is $O(N K)$. This is already enough to pass this problem.</p> <p>For simplicity we can just use Python and memoization DP. The code is as below:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">superEggDrop</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">k</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="nd">@cache</span>
        <span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span>
            <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="n">lo</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="n">hi</span> <span class="o">=</span> <span class="n">n</span>
            <span class="nf">while </span><span class="p">(</span><span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">):</span>
                <span class="n">mid</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="p">(</span><span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
                <span class="k">if</span> <span class="nf">f</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">f</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">mid</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
                    <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span>
            <span class="k">if</span> <span class="n">lo</span> <span class="o">==</span> <span class="n">n</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="nf">max</span><span class="p">(</span><span class="nf">f</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="nf">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">lo</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="nf">max</span><span class="p">(</span><span class="nf">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="nf">f</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">))</span>
            <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="nf">min</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="nf">f</span><span class="p">(</span><span class="n">lo</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="nf">f</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">lo</span><span class="p">,</span> <span class="n">k</span><span class="p">)),</span> <span class="nf">max</span><span class="p">(</span><span class="nf">f</span><span class="p">(</span><span class="n">lo</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="nf">f</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">lo</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">)))</span>
        <span class="k">return</span> <span class="nf">f</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>For bottom-up DP we can just deal with $k$ from small to large, and $n$ from small to large iteratively. Also note that when we are dealing with $k$, the update only depend on $k - 1$, we can compress the space needed to $O(N)$ only. The code is omitted.</p> <h2 id="method-2">Method 2</h2> <p>For method 2, we also calculate $T(n, k)$ for each $n$ and $k$. However, now consider another quantity:</p> \[i^* = \operatorname*{argmin}_{1 \leq i \leq n - 1} \max \left\{ T(i, k - 1), T(n - i, k) \right\}.\] <p>That is, the optimal $i$ where we reached this min. We find this value of $i$ using binary search in method 1, but we can utilize monotonicy again to speed things up. Look at the diagram again.</p> <div class="row mt-1"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/super-egg-drop-2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Illustration of monotonicity of Method 2. </div> <p>When we fix $k$ and increase $n$ (moving the orange line to the green line), because $T(n - i, k)$ is increasing but $T(i, k - 1)$ is fixed, the optimal $i$ is increasing. Now we can use this fact to calculate all the $T(n, k)$ in $O(NK)$ time. We just need to keep track the current optimal $i$. Note that because we need to fix $k$ to use this property so $k$ needs to be in the outer loop. Refer to the code below:</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">const</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mf">1e4</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">const</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">K</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">][</span><span class="n">K</span><span class="p">];</span>

    <span class="kt">int</span> <span class="n">superEggDrop</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">k</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">opt</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">opt</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">f</span><span class="p">[</span><span class="n">opt</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">opt</span><span class="p">][</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">opt</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">opt</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">opt</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">opt</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span>
                        <span class="n">min</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">max</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">opt</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">opt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">]));</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">f</span><span class="p">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="n">k</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>Again, because when we are dealing with $k$, the update only depend on $k - 1$, we can compress the space needed to $O(N)$ only. The code is omitted.</p> <h2 id="method-3">Method 3</h2> <p>For our final method, we think about the problem from another perspective. Instead of trying to figure out the minimum moves needed to determine $f$, consider that given some number of moves $t$ and some number of eggs $k$, what is the maximum size of search space $n$ we can handle. Call this function $g(t, k)$. Under this setting, we just need to find the smallest $t$ such that $g(t, k) \geq n + 1$.</p> <p>In this setting, we similarly have a recurrence relation:</p> \[g(t, k) = g(t - 1, k - 1) + g(t - 1, k).\] <p>Why is this the case? When we use a move to drop an egg, we can handle $g(t - 1, k - 1)$ floors below if it breaks, and $g(t - 1, k)$ above (including the current floor, same reason as before) if it does not break. For our initial condition, we have $g(1, k) = 2$ and $g(t, 1) = t + 1$.</p> <p>Surprisingly, recall that</p> \[\binom{t + 1}{k} = \binom{t}{k - 1} + \binom{t}{k},\] <p>we then actually have</p> \[g(t, k) = \binom{t + 1}{k}.\] <p>We can restrict ourself to only $t \geq k$ here, because reasonably we have $g(t, k) = g(t, t)$ when $k \leq t$. We can then binary search for the answer. This is $O(K \log N)$ time, because we need at most $O(N)$ moves for a search space of size $N$, and for each fixed $t$ we can calculate $\binom{t + 1}{k}$ for $1 \leq k \leq K$ using</p> \[\binom{t + 1}{k} \cdot \frac{k}{t - k + 1} = \binom{t + 1}{k + 1}.\]]]></content><author><name></name></author><category term="study"/><category term="computer science"/><category term="algorithms"/><summary type="html"><![CDATA[An algorithm problem I find interesting and inspiring]]></summary></entry><entry><title type="html">Course review — CMU 10701</title><link href="https://runqiuye.github.io/blog/2025/10701-review/" rel="alternate" type="text/html" title="Course review — CMU 10701"/><published>2025-05-29T20:00:00+00:00</published><updated>2025-05-29T20:00:00+00:00</updated><id>https://runqiuye.github.io/blog/2025/10701-review</id><content type="html" xml:base="https://runqiuye.github.io/blog/2025/10701-review/"><![CDATA[<p>I was going to play some basketball in UW, but the court is taken by some club tournament. Therefore here I am writing this course review on CMU 10701, introduction to machine learning (PhD). As a comparison, I will mention another relevant course I self-studied — Stanford CS229, also introduction to machine learning.</p> <p>I self studied Stanford CS229 during Summer 2024. I think it took me at least half of summer to watch all the lectures (2018 version) and complete all the assignments. I was also doing research at that time, even though that is a relatively stress-free hustle. I took CMU 10701 in Spring 2025, with instructors being Professor Geoffery Gordon and Professor Max Simchowitz. One thing I need to point out is that I registered for this class with time conflict. I did not attend any lectures except for the ones that are midterm and final. However there are lecture recordings so I watched some of them, or actually I think most of them.</p> <p>Overall, I would rate the quality of the class about 6.5 out of 10. As a comparison, I would rate the quality of Stanford CS229 9.5 out of 10, again this is the 2018 version of the course. Even though I don’t really care who the professor is as I mentioned before, the teaching of this course, at least this semester, is horrible. Even though by no means am I trying to say the instructors do not know their stuff for machine learning, they are really not good teachers. Professor Gordon has been teaching this class for many years as far as I know, and he is also probably one of the oldest people in this school that has taken 10701. His lectures usually are a partially completed slides, while he fills it out using a tablet. The slide are by no means good, featuring long sentences that hardly grab attention. The handwritten part are also quite hard to understand. On the other hand, it’s probably Professor Simchowitz’s probably first time teaching any course. His lectures usually feature a slide with many typos, which he claims will be fixed after lecture and usually the typos are still there when I download them after two days of the lecture. He also has a huge ego, like to mention random terms and complicated concepts that are unnecessary. As a comparison, Stanford CS229 features Andrew Ng as the instructor. He always write on the board directly. The lectures are well organized and well structured, with natural mathematical calculations and providing deep insights into the topics. I guess this is a combination of good lecture style and good course material, which is something I will talk about next.</p> <p>The course material of CMU 10701 are good and bad at the same time. We shall compare the course material of both. As expected for an introduction to machine learning class, linear regression, logistic regression, kernels and SVMs, deep learning basics, PCA, and reinforcement learning basics are covered. There are quite a few notable differences. First for CMU 10701, it covers convolutional networks (CNN), recurrent neural networks (RNN), attentions and transformers in LECTURE. Considering the fact that the Stanford class I watched is 2018, we cannot really say much about this. CMU 10701 also covers some basic learning theory (PAC learning and VC dimension), and some introduction to graphical models. These are not covered by the Stanford class, and that’s why I say the course material is good. The CNN, RNN, attention and transformers class are no doubt great introduction to more advanced deep learning class, and classes that focus more on computer vision or natural language processing. The graphical models part also improves my feelings toward the class by a lot, as I like probability and things on the theory side. Therefore I find this really interesting We must note here though by “course material is good”, I do not mean “their presentation of this material is good”. It’s more like it gives me a chance to learn more about these by myself, which turns out to be really interesting. The only exception of this is the one assignment that requires us to implement RNN and transformer encoder using PyTorch. I learned PyTorch from this, and the implementation process improves my understanding of these. However all the materials I referenced while during the homework is either slides for Stanford CS224n (Natural Language Processing), or the paper <em>Attention is all you need</em> itself, instead of the lecture slides. For graphical models, the assignment again help me understand variable elimnation better, but the real click is when I read Bishop’s Patter Recognition and Machine Learning (PRML) book. It gives a more structured introduction to hidden Markov models and graphical models, while generalizing the stuff covered in class into the stage where I feel very interested in. That’s also partially why I will take 10708 probabilistic graphical models next semester. I hope it will give me the chance of reading more of this book. Without this transformer homework and the graphical model part of the course I would probably just give a 5 out of 10 for this class.</p> <p>Now why is the course material bad? Seemingly the Stanford CS229 covers less material, but I think the organization of material is much better. Let’s see an example. Both class covered this thing called the Variational Auto-encoder (VAE) and some basics of diffusion models, in the unsupervised learning section. In 10701, this seems like a very separated lecture called “generative AI”, after talking about contrastive learning and PCA which I don’t think is quite relevant to this. In CS229 this is not in the lectures but in the notes as an optional material, but the way this get introduced is much more natural. For unsupervised learning, CS229 talked about k-means, PCA, ICA. But the difference maker is this thing called the mixture of Gaussians and Expectation Maximization (EM). In my opinion EM is the single most important thing for the theory of probabilistic methods, and VAE precisely utilized the generalized EM algorithm. Generalized EM is also everywhere in PRML. Relevant to this is some lower bound of a distribution called ELBO. CS229 introduces this ELBO through Jensen’s inequality, and take this to a further step through KL divergence in homework. In comparison, 10701 pulls this lower bound out of nowhere using a Taylor’s expansion in a weird form hidden in Professor Gordon’s squibble. This in my opinion is very unnatural, and the funniest part is they put the KL divergence understanding on the finals. In my opinion EM is the key of understand VAE and diffusion models, and I am pretty sure minimal amount of people actually understand what is covered in the generative AI lecture, and surprise surprise this section contribute to another huge part of the final.</p> <p>The RL section is another perfect example for this. Seemingly both classes covered basics of RL, but 10701 only covers the dynamic programming approach to finite horizon MDP. In contrast, CS229 introduces value interation and policy interation using Bellman equation, and in homework we PROVED Bellman update oprator that are used in value iteration is a CONTRACTION MAP! If this is unfamiliar to you, this mean there is a fixed point in the space, and in this case the optimal policy. This gives the correctness of the algorithms and I personally think this is very exciting. DP approach for finite horizon MDP is of course also covered and there are so much more in the notes. Therefore I cannot help but think — why can’t 10701 reduces the introduction of unnecessary random terms, but actually covers the content more in depth? Similarly, topics like contrastive learning simply doesn’t fit into this intro course, but it ended up taking another huge part of the final.</p> <p>One other difference of the two courses is the homework. CS229 only allows NumPy, no PyTorch. I don’t think this is better or worse, but I think this shows the more emphasis on actually understanding the mathematics behind every algorithm, and in the end we implemented a simple CNN for handwritten digit classification, using only NumPy including the back propogation. However again I like transformer part of homework in 10701, as I already said. Also I am not definitely complaining learning PyTorch, which is definitely something I should know, through this chance.</p> <p>I guess that’s it for my comment on these two classes. Overall I think CS229 gives a much better foundational understanding for these introductory machine learning concepts, the homework also gives insights on both the math and the hands-on. The math part of CS229 definitely stands out much more through both lectures and homework. For a side note, I cannot give any advice on the selection between 10301 and 10701, because I have never taken 10301. I also never considered it because before this semester 10301 does not count for major and I want to use 10701 as a prerequisite for a lot more graduate machine learning class.</p>]]></content><author><name></name></author><category term="review"/><category term="computer science"/><category term="machine learning"/><summary type="html"><![CDATA[Course review and reflection on CMU 10701, introduction to machine learning (PhD)]]></summary></entry><entry><title type="html">Course review — CMU 15210</title><link href="https://runqiuye.github.io/blog/2025/15210-review/" rel="alternate" type="text/html" title="Course review — CMU 15210"/><published>2025-05-27T20:00:00+00:00</published><updated>2025-05-27T20:00:00+00:00</updated><id>https://runqiuye.github.io/blog/2025/15210-review</id><content type="html" xml:base="https://runqiuye.github.io/blog/2025/15210-review/"><![CDATA[<p>Unfortunately not really motivated to do work tonight, so I am going to write this course review for CMU 15210, parallel and sequential data structures and algorithms.</p> <p>I took this class in the Spring 25 semester, that is my sophomore spring. The instructors are Danny Sleator and Umut Acar. Might be an unpopular opinion, especally among the people who took this class the same semester as me, but overall I think I like this class, I got an A for the class, and I would give this class a solid 8 out of 10 for the quality and experience.</p> <p>With 15150 introduction to functional programming as a prerequisite, this class also uses Standard ML as its language. This is probably the thing I like the least of the class. Becuase of the strongly-typed nature of SML, it is quite difficult to print things and debug code for homework. This is even worse when you are using some data structures like trees. But I guess this is the price you need to pay for the “parallel” part of the course. I should probably study something more about functional language, especially OCaml by myself, but I don’t think I have the time for that now.</p> <p>I speak highly of the quality of the course. The course basically introduces all the most basics of the algorithms. The homework problems are also classic and inspiring algorithm problems. Aside from that, the parallel part of the course is quite interesting. This means we not only need to care about the work, which is the traditional sense of time complexity, but also we need to care about span. Sometimes there is an interesting trade off between each other, as the optimal work solution might be purely sequential. I think the course is a great introduction to basic algorithm knowledge, and more in-depth content will probably be covered in the sequel of this course – 15451 algorithm design and analysis, which I will take next semester.</p> <p>Now for the difficulty of the course, I again have to put forward the potentially unpopular opinion that the difficulty of the class has been exaggerated. For the grading scheme, there is a 75% bucket system for the homeworks, therefore I think that is easy to max out as long as efforts have been put in and there haven’t been several accidents. Midterms and finals are 15%, 15% and 20% of the final grade respectively, and they are widely described as “very hard”. In my opinion this is simply not true. The first midterm might caught people off guard, because the actual exam is indeed more problems and harder than the practice exams. But for the second midterm and the final people should already be clear about one fact – the practice exams the course staff provided are NOT representative of the acutal exam AT ALL. In particular, they are visibly too easy for the exam, and the number of problems are simply too few for the given time. Some people describe the exam as “impossible” in discussion groups like Discord. I think this is misleading. For all the exams, I do think the exam problems is a natural extension of the content in class and homework, and it is not a wild extension. If work has been put into the course content and homework problems, the exams are definitely not at the level of “impossible”. The fear for the exam mostly stem from the fact that if you don’t come up with the correct algorithm for the problem, you get minimum amount of points. However, there are just so few algorithms that has been covered in class, and each problem needs at most one of them. Therefore again I would say the exams problems are definitely fair, and it is closely related to the course so I think it is well written.</p> <p>One problem in particular seems to trigger some controversy. One of them is during midterm 2, a problem asks for a constant in a proof covered in class. In my opinion this is a bad problem, because the answer is not the unique constant that will make the statement true. It is of course hard to recall this specific number when it is actually not the unique answer. Even though I attended almost every lecture, but I really don’t have a deep impression on this. I tried to reproduce the proof and ultimately magically get the right answer. Some people refer to this as “lecture trivia” and was quite bothered by this 4 point question in an exam with an average of 60+. Personally I do not think this is a big deal because most people really cannot get this, and the course have a very generous curve for the final grade. This is also the only instance where something so niche show up on the exam.</p> <p>All in all, I again want to state my point that the exam problems are fair, and the difficulty is exaggerated by some people. Despite the exam being a mild time crunch, with all the questions being a natural extension of class materials, I could not quite understand the very low average score, but why complaining for a good curve, albeit I do not need it.</p> <p>Other than this, I have some comment on the teaching of the course. The teaching and course organization are obviously not good. Notably the algorithm needed for one homework problem is not even covered. That is also one of the most important algorithm of the section. There are also quite a few bad comments toward Professor Sleator, but I personally think his teaching are fine compared to some other course which I am about to talk about. In particular, I like the way he present things on either blackboard or tablet. I am never the type of person that spend time comparing different professor and adjust my course selections, and I will be taking 15451 with him as one of the instructor next semester.</p> <p>As for preparation of the course, I would say LeetCode definitely helps, especially NeetCode 150. However for most people that are taking the course, LeetCode is already a necessary thing to do for the career, so I guess there’s no such thing as doing it specifically for the course. However, if you haven’t done any of that before the class, this class is actually a good starting point.</p>]]></content><author><name></name></author><category term="review"/><category term="computer science"/><category term="algorithms"/><summary type="html"><![CDATA[Course review and reflection on CMU 15210, parallel and sequential data structures and algorithms]]></summary></entry><entry><title type="html">Two weeks of summer — summary and reflection</title><link href="https://runqiuye.github.io/blog/2025/summary/" rel="alternate" type="text/html" title="Two weeks of summer — summary and reflection"/><published>2025-05-26T19:00:00+00:00</published><updated>2025-05-26T19:00:00+00:00</updated><id>https://runqiuye.github.io/blog/2025/summary</id><content type="html" xml:base="https://runqiuye.github.io/blog/2025/summary/"><![CDATA[<p>After finishing all my finals for the Spring 25 semester at CMU in the first week of May, I arrived at Seattle after a 5-hour flight on which I almost died because of the uncomfort. Now I have spent more than two weeks in Seattle, and I have started my internship at Amazon for two weeks. I am going to put some thoughts and reflections into this document as a brief summary.</p> <p>First of all, the internship at AWS. For a brief recap, I received an online assessment from Amazon near the end of Fall 25 semester, or 0~2 weeks from the finals week to be precise. I was not able to figure out the second coding question, but I guess CMU reputation bailed me out, so I got the interview right when I was protoring the finals for Calculus in 3D. After a not so easy process of scheduling the interview, as I will be in China during winter break, I clutch up on this 3rd interview I got for the year and landed this dream-like internship. As you may already guess this is my first ever internship, not to say one year ago I cannot even code anything. Therefore, I am naturally very nervous, and it is indeed quite tough.</p> <p>Before my first day I know nothing about my team, other than the fact that my interviewer has AWS Bedrock on her LinkedIn. Stepping into the office, I finally saw this sign that says “AWS Data/ML Only”. I was quite lucky honestly, as I am very interested in machine learning. Now two weeks into the internship, I have been getting more and more familiar with my team, and liking it more and more.</p> <p>Our team mostly helps users host LLMs on AWS, and my project is interacting with this whole lifecycle of model hosting to visualize datas and logs. The problem is I know nothing about AWS or cloud computing whatsoever, but thankfully my mentor pointed to me some AWS services I should start getting familiar with, and I found several good youtube videos introducing what is cloud computing and AWS. During these days, I start to become familiar with the common AWS services, and I become more and more interested in this topic. After thinking about it and asking my friend, I decide that it will be a good idea to get a AWS certification this summer during the internship. After some more youtube videos, I bought this class on udemy for AWS cloud-practitioner exam to start studying, and I should figure out how to schedule an exam and all the other stuff soon. I have watched a few sections of this class during the two weeks, and I think I like it a lot. The hands-on help me understand the concepts a lot. I think I should lock in to study more about it, and definitely aiming to get the certification during my internship. Other than that, I have been getting familiar with the architecture and pipeline I will be working with, but of course new challenges are always comming so I have to be ready.</p> <p>Because of the unexpected toughness of the internship, the self-study plan I made before the summer couln’t really work out — I thought I will be motivated enough or have the time to finish off the Standford cs224n (NLP) lectures and do all the homework and the project. I also plan to self-study more ML on the theory side by reading Bishop’s Pattern Recognition and Machine Learning. However I was not motivated enough or honestly not having enough time for those. I felt so tired after work every day and I know I should prioritize on the AWS course (even on that I am slacking a bit). So I guess those needs to wait a bit. I should be able to have plenty of time reading PRML when I take 10708 next year, which I am very looking forward to, but I need to come up with some time to do the NLP course and projects, which is more on the practical side with an actual project. I also need to figure out how and where to rent GPU for these, but again cannot really think about these now.</p> <p>Then comes Memorial Day weekend, and I am writing this on the last day of the holiday. I should have also spent more time exploring Seattle, but my friends keep bailing out of the plan so that is kinda annoying. I bought a basketball though so I can now go play basketball every day instead of it depending on someone’s already playing and I can join in UW. I was thinking about going to gym but Amazon’s frugality gives no gym and UW gym is not affordable. Hopefully basketball is good enough and I really need to get the consistency in. I played quite a lot of Pubg mobile for the holiday which is not good, but I guess people need to take break and it is honestly good to play with all my friends again. Last time we play like this is literally before coming to CMU and before meeting in person. Also, AWS course just feels a bit boring this weekend, so I start to read Folland’s real analysis textbook. I am of course interested in this but also I might need to read this to take grad probability and stochastic calculus if I end up doing that (which again I am interested in). It’s much better than the AWS course for sure, probably because I just think I like analysis, even after the very tough math studies analysis course last semester. In particular I am reading the chapter on signed and complex measures, it’s really fun but I haven’t done any exercise yet. I probably should and I need to figure out how should I approach it. Hopefully I can find some online course on this and see if they have a list of problems for the assignments, which is something I always do. At the same time it is also true that I need to get the AWS course back on track if I want to get the certification before my internship ends (which I definitely want).</p> <p>I think that’s pretty much it and I think I am doing a relatively good job. Internship are most certainly tough, but I will ask more questions and hopefully ramp up successfully. For self-study, I should be just prioritizing AWS course and do some real analysis if that’s too boring, might also need to switch with NLP though (too much to do uhh). Hopefully I can use the time after work better. For touching grass I just remembered that I will go Bellevue next week with my friends Daniel and Sunny, and I should also definitely checkout UW wetlands, hopefully with some friends. More ambitious hiking plans are not very tangible at this point even though it sounds good. I also hope I can consistenly work out every day, at least by playing some basketball.</p> <p>Hope for the best.</p>]]></content><author><name></name></author><category term="thoughts"/><category term="computer science"/><category term="mathematics"/><summary type="html"><![CDATA[Thoughts and reflection on my first two weeks of summer --- internship, self-study, etc.]]></summary></entry><entry><title type="html">Setting up this website</title><link href="https://runqiuye.github.io/blog/2025/setup/" rel="alternate" type="text/html" title="Setting up this website"/><published>2025-05-26T15:00:00+00:00</published><updated>2025-05-26T15:00:00+00:00</updated><id>https://runqiuye.github.io/blog/2025/setup</id><content type="html" xml:base="https://runqiuye.github.io/blog/2025/setup/"><![CDATA[<p>I decided that I should set up a personal website, but at the same time I have never done anything like HTML or CSS before, nor do I want to learn about that. I then watched some youtube videos and find out that <code class="language-plaintext highlighter-rouge">jekyll</code> and this <code class="language-plaintext highlighter-rouge">al-folio</code> template seems pretty cool, and it doesn’t seem too hard, so I begin setting it up.</p> <p>As the <code class="language-plaintext highlighter-rouge">INSTALL.md</code> file in the <code class="language-plaintext highlighter-rouge">al-folio</code> repository recommended, I was following the guide and try to set up through Docker containers. Then I realized that I know nothing about Docker, except for what are Docker images, Docker containers, and Docker registries. What this leads to is that after hitting Enter after typing in the <code class="language-plaintext highlighter-rouge">docker compose up</code>, I did not even realize the things is already running, because I was waiting for the command to finish running and it takes forever. After I finally realized this fact, I could not see anything in <code class="language-plaintext highlighter-rouge">http://localhost:8080</code>. This is when I realized there is actually an ERROR! Indeed, the log says</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>jekyll-1  | bundler: failed to load command: jekyll (/usr/local/bundle/bin/jekyll)
jekyll-1  | /usr/local/bundle/gems/bundler-2.6.6/lib/bundler/definition.rb:695:in 'Bundler::Definition#materialize': Could not find nokogiri-1.18.8-x86_64-linux-gnu in locally installed gems (Bundler::GemNotFound)
</pre></td></tr></tbody></table></code></pre></div></div> <p>even though the previous command <code class="language-plaintext highlighter-rouge">docker compose pull</code> tells me <code class="language-plaintext highlighter-rouge">jekyll</code> is already pulled. After I stuck here for about one hour, I was ready to call it a day, but I decided to give it another try.</p> <p>I decided to roll back to the local setup method, which is supposedly not recommended. I then decide to follow <a href="https://www.youtube.com/watch?v=fV01b0duZwU&amp;t=632s">this video</a> to download ruby, jekyll, bundler, or whatever those are. However, the command in the video is not working for me at all! Supposedly it should install this thing called <code class="language-plaintext highlighter-rouge">chruby</code> and <code class="language-plaintext highlighter-rouge">chruby</code> will download <code class="language-plaintext highlighter-rouge">ruby 3.3.5</code>. These steps goes well but then <code class="language-plaintext highlighter-rouge">ruby -v</code> still gives me version 2.6, and I have zero idea how to change it.</p> <p>I finally decide to search up how to download and use a specific ruby version, and most answers in stack overflow is referring to this <code class="language-plaintext highlighter-rouge">rbenv</code> thing, which I suppose is similar to <code class="language-plaintext highlighter-rouge">chruby</code>. Therefore, I installed it and successfully used the <code class="language-plaintext highlighter-rouge">rbenv global 3.3.5</code> command to conclude the success of this step. Then I installed some more stuff like jekell and bundler, which again I have no idea on. There might again be some version issues happening during the process but it was 1am and I could not recall it. Then this deployment command <code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code> finally runs successfully and I was able to see the template website at <code class="language-plaintext highlighter-rouge">http://localhost:4000</code>.</p> <p>Even so, one thing that annoys me VERY MUCH is that there is this <code class="language-plaintext highlighter-rouge">rbenv:3.3.5</code> that shows up on my terminal, to the right of every prompt. I am honestly so pissed off by this because I do not want any of thses showing up on my terminal every day. I searched on stack overflow how to get rid of it and did not get any good answer. I also did not see a <code class="language-plaintext highlighter-rouge">PROMPT</code> field in my <code class="language-plaintext highlighter-rouge">.zshrc</code> so I suppose it must be somewhere else. Very unfortunately I have yet to figure out a solution for this and I am stuck with this thing that torture my several hours on my terminal.</p> <p>After a whole night sleep I did some editing of the template to remove the pages I do not really want and filled in some actual content. Now I think the website is at a relatively complete state and I will call it here.</p> <p>Stay tuned for more random thoughts.</p>]]></content><author><name></name></author><category term="thoughts"/><category term="computer science"/><summary type="html"><![CDATA[Difficulties and solutions for setting up this website]]></summary></entry><entry><title type="html">Counting numbers</title><link href="https://runqiuye.github.io/blog/2025/numdp/" rel="alternate" type="text/html" title="Counting numbers"/><published>2025-01-29T00:00:00+00:00</published><updated>2025-01-29T00:00:00+00:00</updated><id>https://runqiuye.github.io/blog/2025/numdp</id><content type="html" xml:base="https://runqiuye.github.io/blog/2025/numdp/"><![CDATA[<p>This is a document I wrote a while ago, before I create this website. It is quite interesting, so I am making this my first blog post on this website to help me set up the blog section and keep the document.</p> <hr/> <p>I was doing some practices on the CSES problem set, and this number counting dynamic programming problem interests me a lot. This is an example of a type of problems where we need to count numbers that satisfies a given requirement, but the range of the numbers is too large for us to check one by one, such as \(10^{18}\). Therefore, we need to use dynamic programming to speed up the counting. This is also the first time I solve a problem like this, so I decide to document my thought process and solution.</p> <h2 id="problem">Problem</h2> <p>Count the number of integers between \(a\) and \(b\) where <strong>no two adjacent digits are the same</strong>.</p> <h4 id="input">Input</h4> <p>The only input line has two integers \(a\) and \(b\).</p> <h4 id="output">Output</h4> <p>Print one integer – the answer to the problem.</p> <h4 id="constraints">Constraints</h4> <p>The integers \(a\) and \(b\) are such that \(0 \leq a \leq b \leq 10^{18}\)</p> <h4 id="example">Example</h4> <p>Input</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>123 321
</pre></td></tr></tbody></table></code></pre></div></div> <p>Output</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>171
</pre></td></tr></tbody></table></code></pre></div></div> <h2 id="solution">Solution</h2> <p>If we can calculate the number of integers between \(0\) and \(n\) with no two adjacent digits for any nonnegative \(n\), then the answer is just the count for \([0, b]\) and minus the count for \([0, a - 1]\). We will write a function called <code class="language-plaintext highlighter-rouge">solve</code> that solves this reduced problem.</p> <p>Note that for a number to have no two adjacent digits being the same, the first and second digit on the left cannot be the same, and the “subnumber” starting from the second digits on the left and all the way to the right cannot have two ajacent digits being the same either. We have then found a natural subproblem for dynamic programming.</p> <p>First count the number of integers with \(i\) digits that start with some digit (for example starting with \(1\), or \(2\), it doesn’t matter), have no adjacent digits being the same, call this \(f_i\). Note that we do not consider any leading zeros here. This might be a bit confusing to parse. Consider this example — \(f_3\) is the number of 3-digits numbers that start with a \(1\) and have no adjacent digits being the same. Then we note that \(f_i = 9 f_{i-1}\), since we already set the first digit and the second digit has \(9\) options for it to be different than the first. Also \(f_1 = 1\), because for example there is only one 1-digit number that start with the digit \(2\), namely the number \(2\). We can preprocess \(f_i\) for \(1 \leq i \leq 18\).</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">19</span><span class="p">;</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">l</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">;</span>
    <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1LL</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9LL</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solve</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">-</span> <span class="n">solve</span><span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>For our main function <code class="language-plaintext highlighter-rouge">solve</code>, we first need to convert the number into an array of digits.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">len</span><span class="o">++</span><span class="p">;</span>
        <span class="n">a</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
        <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ......</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>To illustrate this with an example, consider <code class="language-plaintext highlighter-rouge">solve(2413)</code>. Then the <code class="language-plaintext highlighter-rouge">a</code> array and the variable <code class="language-plaintext highlighter-rouge">len</code> would be</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>a = [0, 3, 1, 4, 2]
len = 4
</pre></td></tr></tbody></table></code></pre></div></div> <p>Now we start the counting process, for a number with 4 digits and the leading digit being <code class="language-plaintext highlighter-rouge">0</code> and <code class="language-plaintext highlighter-rouge">1</code>, there is <code class="language-plaintext highlighter-rouge">f[4]</code> integers without two adjacent digits being the same. For leading digit <code class="language-plaintext highlighter-rouge">2</code> we have to consider the boundary so we handle that using next iteration. The next iteration is essentially counting the number of integers with 4 digits, starting with <code class="language-plaintext highlighter-rouge">2</code>, and no two adjacent digits are the same. For <code class="language-plaintext highlighter-rouge">0</code>, <code class="language-plaintext highlighter-rouge">1</code>, <code class="language-plaintext highlighter-rouge">2</code> and <code class="language-plaintext highlighter-rouge">3</code> on <code class="language-plaintext highlighter-rouge">a[3]</code> we can use our <code class="language-plaintext highlighter-rouge">f[3]</code> value directly and we handle the boundary <code class="language-plaintext highlighter-rouge">4</code> with next iteration. Therefore, our main loop is</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">res</span> <span class="o">+=</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="n">res</span> <span class="o">-=</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span> <span class="n">res</span><span class="o">++</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p>Notice that when <code class="language-plaintext highlighter-rouge">a[i] &gt; a[i + 1]</code>, we should not count the numbers with <code class="language-plaintext highlighter-rouge">a[i] = a[i + 1]</code> so we use <code class="language-plaintext highlighter-rouge">res -= f[i]</code> to handle that. In addition, when <code class="language-plaintext highlighter-rouge">a[i] = a[i + 1]</code> since we are essentially counting the numbers starting with <code class="language-plaintext highlighter-rouge">a[i+1 : len]</code> in later iterations and <code class="language-plaintext highlighter-rouge">a[i] = a[i + 1]</code> indicates the presence of two adjacent digits being the same, we break from the loop. Finally the <code class="language-plaintext highlighter-rouge">flag</code> and <code class="language-plaintext highlighter-rouge">res++</code> is used to handle the number itself.</p> <p>To deal with leading zeros, we remove the contribution from leading digits being zeros first by <code class="language-plaintext highlighter-rouge">res -= f[len]</code>, and then add the contribution from integers with <code class="language-plaintext highlighter-rouge">j</code> digits starting with <code class="language-plaintext highlighter-rouge">1</code> to <code class="language-plaintext highlighter-rouge">9</code> (ensuring no leading zeros) for <code class="language-plaintext highlighter-rouge">1 &lt;= j &lt;= len</code>.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="n">res</span> <span class="o">-=</span> <span class="n">f</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">res</span> <span class="o">+=</span> <span class="mi">9LL</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
<span class="p">}</span>
<span class="n">res</span><span class="o">++</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">res++</code> is used to handle the number <code class="language-plaintext highlighter-rouge">0</code>. This finishes this function and the complete solution code is as follows.</p> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="rouge-code"><pre><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">19</span><span class="p">;</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">f</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>

<span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">len</span><span class="o">++</span><span class="p">;</span>
        <span class="n">a</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
        <span class="n">n</span> <span class="o">/=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="p">(</span><span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="n">res</span> <span class="o">-=</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span> <span class="n">res</span><span class="o">++</span><span class="p">;</span>

    <span class="n">res</span> <span class="o">-=</span> <span class="n">f</span><span class="p">[</span><span class="n">len</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="mi">9LL</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="n">res</span><span class="o">++</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">l</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">;</span>
    <span class="n">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1LL</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">f</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">9LL</span> <span class="o">*</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">solve</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">-</span> <span class="n">solve</span><span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>]]></content><author><name></name></author><category term="study"/><category term="computer science"/><category term="algorithms"/><summary type="html"><![CDATA[A number counting dynamic programming problem]]></summary></entry></feed>